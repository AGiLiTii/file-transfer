/* * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileOutputStream;
import java.net.ServerSocket;
import java.net.SocketTimeoutException;
import java.awt.Color;

import javax.naming.spi.DirStateFactory.Result;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.Socket;
import javax.swing.JPanel;
import javax.swing.JProgressBar;

/**
 *
 * @author louis
 */
public class Receiver extends javax.swing.JFrame {

    static final String reset = "\u001B[0m";
    static final String green = "\u001B[32m";
    static final String red = "\u001B[31m";
    static final String yellow = "\u001B[33m";

    static boolean done = false;
    static boolean sent = false;
    static int amountReceived = 0;
    static int progressPercent = 0;

    public JProgressBar getjProgressBar1() {
        return jProgressBar1;
    }

    public JPanel getjPanel2() {
        return jPanel2;
    }

    public JLabel getjLabel6() {
        return jLabel6;
    }

    /**
     * Creates new form Receiver
     */
    public Receiver() {
        initComponents();
        jProgressBar1.setForeground(new Color(210, 175, 255));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(31, 33, 37));
        jPanel2.setPreferredSize(new java.awt.Dimension(782, 578));

        jProgressBar1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jProgressBar1.setForeground(new java.awt.Color(210, 175, 255));
        jProgressBar1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar1.setStringPainted(true);

        jPanel4.setBackground(new java.awt.Color(210, 175, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(435, 100));

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 3, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(31, 33, 37));
        jLabel4.setText("tsTransfer");

        jLabel5.setForeground(new java.awt.Color(31, 33, 37));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo_black.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 328,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(352, Short.MAX_VALUE)));
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(20, Short.MAX_VALUE)));

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(210, 175, 255));
        jLabel2.setText("Select directory:");

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(210, 175, 255));
        jLabel6.setText("Waiting for Sender ...");

        jTextField3.setBackground(new java.awt.Color(102, 102, 102));
        jTextField3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(204, 204, 204));
        jTextField3.setText("File path ...");
        jTextField3.setToolTipText("");
        jTextField3.setBorder(null);
        jTextField3.setFocusable(false);
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
        });
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 175, 255)));
        jPanel6.setForeground(new java.awt.Color(102, 102, 102));
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel6MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel6MouseExited(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(210, 175, 255));
        jLabel8.setText("Browse");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel8)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE));

        jPanel7.setBackground(new java.awt.Color(80, 84, 86));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 175, 255)));
        jPanel7.setForeground(new java.awt.Color(80, 84, 86));
        jPanel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel7MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel7MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel7MouseExited(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(210, 175, 255));
        jLabel9.setText("Receive File");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(174, 174, 174)
                                .addComponent(jLabel9)
                                .addContainerGap(186, Short.MAX_VALUE)));
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 373,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(132, 132, 132)
                                                .addComponent(jLabel2))
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 442,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 300,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(136, 136, 136)));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField3))
                                .addGap(12, 12, 12)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 18,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(223, Short.MAX_VALUE)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:

    }// GEN-LAST:event_formWindowStateChanged

    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField3FocusGained
        // TODO add your handling code here:
        jTextField3.setText("");
    }// GEN-LAST:event_jTextField3FocusGained

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
        // jTextField3.setText("");
    }// GEN-LAST:event_jTextField3ActionPerformed

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jPanel6MouseClicked
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File selectedFile = fileChooser.getCurrentDirectory();
        jTextField3.setText(selectedFile.getAbsolutePath());

    }// GEN-LAST:event_jPanel6MouseClicked

    private void jPanel6MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jPanel6MouseEntered
        // TODO add your handling code here:
        jPanel6.setBackground(new Color(210, 175, 255));
        jLabel8.setForeground(new Color(31, 33, 37));
    }// GEN-LAST:event_jPanel6MouseEntered

    private void jPanel6MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jPanel6MouseExited
        // TODO add your handling code here:
        jLabel8.setForeground(new Color(210, 175, 255));
        jPanel6.setBackground(new Color(102, 102, 102));
    }// GEN-LAST:event_jPanel6MouseExited

    private void jPanel7MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jPanel7MouseEntered
        // TODO add your handling code here:
        jPanel7.setBackground(new Color(210, 175, 255));
        jLabel9.setForeground(new Color(31, 33, 37));
    }// GEN-LAST:event_jPanel7MouseEntered

    private void jPanel7MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jPanel7MouseExited
        // TODO add your handling code here:
        jLabel9.setForeground(new Color(210, 175, 255));
        jPanel7.setBackground(new Color(102, 102, 102));
    }// GEN-LAST:event_jPanel7MouseExited

    private void jPanel7MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jPanel7MouseClicked
        // TODO add your handling code here:
        if (jTextField3.getText().equals("File path ...")) {
            JOptionPane.showMessageDialog(this, "Invalid file path!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String fileDirectory = jTextField3.getText();
            jPanel7.setVisible(false);
            jTextField3.setVisible(false);
            jPanel6.setVisible(false);
            jLabel6.setVisible(true);
            jProgressBar1.setVisible(true);
            jLabel2.setVisible(false);
            new Thread(() -> {
                try {

                    runReceiver(fileDirectory, jLabel6, jProgressBar1);
                } catch (Exception e) {
                }
            }).start();

        }

    }// GEN-LAST:event_jPanel7MouseClicked

    public static void receiveTCP(ObjectInputStream in, Packet info, String dir, JLabel jLabel6,
            JProgressBar jProgressBar1) throws Exception {
                long start = System.nanoTime();

        // Receive file from Sender
        byte bytes[] = (byte[]) in.readObject();

        jLabel6.setText("Receiving File ...");
        jProgressBar1.setForeground(new Color(210, 175, 255));

        new Thread(() -> {
            for (int i = 0; i <= 10; i++) {
                try {
                    Thread.sleep(20);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Receiver.class.getName()).log(Level.SEVERE, null, ex);
                }
                jProgressBar1.setValue(i * 10);
            }

            jLabel6.setText("Done !");

        }).start();
        // Select directory to save file
        String newFileName = "";
        for (int i = info.fileName.length() - 1; i >= 0; i--) {
            if (info.fileName.charAt(i) == '/') {
                newFileName = info.fileName.substring(i + 1);
                break;
            }
        }

        FileOutputStream outputStream = new FileOutputStream(dir + "/" + newFileName);
        outputStream.write(bytes);

        // close file output stream
        outputStream.close();

        System.out.println(green + "[+] Successfully received file on TCP" + reset);
        long end = System.nanoTime();
        System.out.println("Time = " + (end - start)/1000000);

        runReceiver(dir, jLabel6, jProgressBar1);
        
    }

    public static void receiveUDP(ObjectInputStream in, ObjectOutputStream out, Packet info, String dir, JLabel jLabel6,
            JProgressBar jProgressBar1) throws Exception {
                long start = System.nanoTime();
        // new thread for handling tcp signals
        SignalManager signalManager = new SignalManager(in);
        Thread tcpThread = new Thread(signalManager);
        tcpThread.start();

        DatagramSocket socket = new DatagramSocket(2560);

        boolean receivedPackets[] = { false, false, false, false, false, false, false, false, false, false };
        int packetSizes[] = new int[10];
        byte packet_buffers[][] = new byte[10][1024];
        int packetSize = 0;

        // Select directory to save file
        String newFileName = "";
        for (int i = info.fileName.length() - 1; i >= 0; i--) {
            if (info.fileName.charAt(i) == '/') {
                newFileName = info.fileName.substring(i + 1);
                break;
            }
        }
        FileOutputStream outputStream = new FileOutputStream(dir + "/" + newFileName);

        // specify socket timeout
        socket.setSoTimeout(500);

        // progressbar
        jLabel6.setText("Receiving File ...");
        jProgressBar1.setForeground(new Color(210, 175, 255));

        new Thread(() -> {

            // update progress bar as being received
            while (progressPercent < 100) {
                try {
                    Thread.sleep(200);
                } catch (Exception e) {
                }
                jProgressBar1.setValue(progressPercent);
            }

            // show done and wait
            jLabel6.setText("Done");

        }).start();

        // variable to keep track of progress
        int burstsReceived = 0;

        double kilobytesInFile = (info.fileSize / 1024);
        int burstsToReceive = (int) kilobytesInFile / 10;
        if (kilobytesInFile % 10 != 0) {
            burstsToReceive++;
        }

        System.out.println("filsize  " + info.fileSize + "");
        System.out.println("kb in file : " + kilobytesInFile + "\n divided by 10 = " + burstsToReceive);

        // start receiving
        while (!done) {

            while (!sent && !done) {

                // receive buffer with header
                byte bufferWithHeader[] = new byte[1024 + 3];
                DatagramPacket packet = new DatagramPacket(bufferWithHeader, 1024 + 3);

                try {
                    socket.receive(packet);
                } catch (SocketTimeoutException e) {
                    System.out.println("[+] The datagram socket has timed out, moving on");
                    continue;
                }

                // extract header from buffer with header received
                byte buffer[] = new byte[1024];
                System.arraycopy(bufferWithHeader, 3, buffer, 0, 1024);

                int seqNum = bufferWithHeader[0] & 0xFF;
                packetSize = ((bufferWithHeader[1] & 0xFF) * 255) + (bufferWithHeader[2] & 0xFF);
                System.out.println("PACKET SIZE: " + packetSize);

                if (!receivedPackets[seqNum]) {
                    // set received packet to true
                    receivedPackets[seqNum] = true;

                    // add buffer to packet buffers array
                    packet_buffers[seqNum] = buffer;

                    // add packet size to array
                    packetSizes[seqNum] = packetSize;

                    System.out.println(yellow + "[+] Received Packet " + seqNum + reset);
                }

            }

            // calculate lost packets
            String lostPackets = "";
            for (int i = 0; i < amountReceived; i++) {
                if (receivedPackets[i] == false) {
                    lostPackets += i + "";
                }
            }

            // send lost packets
            out.writeObject(lostPackets);
            System.out.println(yellow + "[+] Told the sender which packets was lost " + lostPackets + reset);

            // full burst received
            if (lostPackets.equals("")) {

                System.out.println(green + "[+] The full burst was received !" + reset);

                burstsReceived++;

                progressPercent = (burstsReceived * 100) / burstsToReceive;

                System.out.println("PROGRESS BAR PERCENTAGE = " + progressPercent);

                // write buffers to file
                for (int i = 0; i < amountReceived; i++) {
                    outputStream.write(packet_buffers[i], 0, packetSizes[i]);
                }

                // reset the received array for next 10 packets
                for (int i = 0; i < receivedPackets.length; i++) {
                    receivedPackets[i] = false;
                }

            }

            sent = false;
        }

        // terminateProgram(socket, outputStream);

        // close file output stream
        outputStream.close();
        System.out.println(green + "[+] Successfully received file on UDP" + reset);
        long end = System.nanoTime();
        System.out.println("Time = "+(end - start)/1000000);

        runReceiver(dir, jLabel6, jProgressBar1);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Receiver f = new Receiver();
                f.setVisible(true);
                f.setResizable(false);
                f.requestFocus();
                f.jLabel6.setVisible(false);
                f.jProgressBar1.setVisible(false);
            }
        });
    }

    public static void runReceiver(String fileDir, JLabel jLabel6, JProgressBar jProgressBar1) throws Exception {
        System.out.println(green + "[+] Receiver started" + reset);

        // Create server
        ServerSocket ss = new ServerSocket(2560);
        Socket s = ss.accept();

        System.out.println(green + "[+] Sender successfully connected!" + reset);

        // Receive info packet
        ObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());
        ObjectInputStream in = new ObjectInputStream(s.getInputStream());

        Packet info = (Packet) in.readObject();

        // Choose protocol to receive with
        if (info.protocolType.equals("TCP")) {
            receiveTCP(in, info, fileDir, jLabel6, jProgressBar1);
        } else if (info.protocolType.equals("RBUDP")) {
            receiveUDP(in, out, info, fileDir, jLabel6, jProgressBar1);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    public javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

}
